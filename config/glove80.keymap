/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {         /* <-- Start of Root node */

    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
        // en_us version


/****************************************************************/
                         /* VARIABLES */
/****************************************************************/
	
#define COMBO_TIMEOUT_MS 50                /* How quickly combo keys must be pressed together */
#define QUICK_TAP_MS 200
#define TAPPING_TERM_MS 280
#define TAPPING_TERM_MS_SLOWER 250
#define STICKY_KEY_RELEASE_AFTER_MS 600    /* How long Sticky Keys stay pressed */
#define AUTOSHIFT_TAPPING_TERM_MS 200      /* How long to hold for Autoshift */
#define HOME_ROW_MODS_TAPPING_TERM_MS 300  /* How long to hold to activate home row mods for same side or mouse usage */
#define HOME_ROW_MODS_QUICK_TAP_MS 150     /* Cool down after typing before home row mods can be used */
#define THUMBS_TAPPING_TERM_MS 200         /* How long thumb keys can be held before rolls send the higher layer key */
#define THUMBS_QUICK_TAP_MS 250            /* How quickly to double tap thumb keys to hold down the key */
#define CONTINUE_SELECTION_TIMEOUT 60000   /* How long until the selection continuation mode times out */

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    0  1  2  3  4      \
    10 11 12 13 14 15  \
    22 23 24 25 26 27  \
    34 35 36 37 38 39  \
    46 47 48 49 50 51  \
    64 65 66 67 68

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
        5  6  7  8  9   \
    16 17 18 19 20 21   \
    28 29 30 31 32 33   \
    40 41 42 43 44 45   \
    58 59 60 61 62 63   \
       75 76 77 78 79

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS       \
    52 53 54    55 56 57 \
    69 70 71    72 73 74

/****************************************************************/
                         /* Helper functions */
/****************************************************************/

/* Convert NAME parameters into a ZMK label string */
#define STRINGIFY(x) #x

/* COMBOS */
#define ZMK_COMBO(NAME, KEY_POSITIONS, BINDINGS)  \
    NAME {                                        \
        timeout-ms    = <COMBO_TIMEOUT_MS>;       \
        key-positions = <KEY_POSITIONS>;          \
        bindings      = <BINDINGS>;               \
    };

/* Create a ZMK behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...)                   \
    behaviors {                                   \
        NAME: NAME {                              \
            label = STRINGIFY(ZB_ ## NAME);       \
            __VA_ARGS__                           \
        };                                        \
    };

/* "Timerless" home row mod */
#define HOME_ROW_MOD(NAME, KEY_POSITIONS)                                                                 \
    ZMK_BEHAVIOR(NAME, 											                                                              \
        compatible                 = "zmk,behavior-hold-tap";                                             \
        #binding-cells             = <2>;                                                                 \
        flavor                     = "balanced";                        /* Fast hold behavior */          \
        tapping-term-ms            = <HOME_ROW_MODS_TAPPING_TERM_MS>;   /* Mouse usage */                 \
        quick-tap-ms               = <HOME_ROW_MODS_QUICK_TAP_MS>;      /* Typing cool down */            \
        global-quick-tap;                                               /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;                   /* Use opposite hand */           \
        bindings                   = <&kp>, <&kp>;                                                        \
    )

/* Hold-Tap helper */
#define HOLD_TAP(NAME, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-hold-tap"; \
        #binding-cells = <2>; \
        __VA_ARGS__ \
    )

/* Balanced Hold-Tap for home row mods and thumb layer keys */
#define BALANCED_HOLD_TAP(NAME, ...) \
    HOLD_TAP(NAME, \
        flavor = "balanced";  /* Fast hold */ \
        __VA_ARGS__ \
    )

/* Mod-Morph helper */
#define MOD_MORPH(NAME, STANDARD, MORPHED, MODS) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <STANDARD>, <MORPHED>; \
        mods = <(MODS)>; \
    )

/* Mod-Morph that sends another key when Shift is held */
#define SHIFT_MORPH(NAME, LOWER, UPPER) \
    MOD_MORPH(NAME, LOWER, UPPER, MOD_LSFT|MOD_RSFT)

/* Wrap ZMK_MACRO to avoid needing to specify Macro node */
#define ZMKMACRO(NAME, ...) \
    macros { \
        ZMK_MACRO(NAME, __VA_ARGS__) \
    };

#define ZMK_MACRO_ZERO_PAR(name, ...) \
        behaviors { \
            name: name { \
                 label          = STRINGIFY(ZB_ ## NAME); \
                 compatible     = "zmk,behavior-macro"; \
                 #binding-cells = <0>; \
                 __VA_ARGS__ \
            }; \
        };

/* Instant key press Macro helper */
#define FAST_MACRO(NAME, BINDINGS) \
    ZMKMACRO(NAME, \
        tap-ms = <0>; \
        wait-ms = <0>; \
        bindings = <BINDINGS>; \
    )

/****************************************************************/
                         /* KEY POSITIONS */
/****************************************************************/
/* Use these key positions for Hold-Tap hold-trigger-key-positions and Combos

┌────┬────┬────┬────┬────┐                           ┌────┬────┬────┬────┬────┐
│ 0  │ 1  │ 2  │ 3  │ 4  │                           │ 5  │ 6  │ 7  │ 8  │ 9  │
├────┼────┼────┼────┼────┼────┐                 ┌────┼────┼────┼────┼────┼────┤
│ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │                 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
│ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │                 │ 28 │ 29 │ 30 │ 31 │ 32 │ 33 │
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
│ 34 │ 35 │ 36 │ 37 │ 38 │ 39 │                 │ 40 │ 41 │ 42 │ 43 │ 44 │ 45 │
├────┼─==─┼─==─┼─==─┼─==─┼────┤                 ├────┼─==─┼─==─┼─==─┼─==─┼────┤
│ 46 │ 47 │ 48 │ 49 │ 50 │ 51 │                 │ 58 │ 59 │ 60 │ 61 │ 62 │ 63 │
│────┼────┼────┼────┼────┼────┘                 └────┼────┼────┼────┼────┼────┤
│ 64 │ 65 │ 66 │ 67 │ 68 │                           │ 75 │ 76 │ 77 │ 78 │ 79 │
└────┴────┴────┴────┴────┘                           └────┴────┴────┴────┴────┘
                    ┌────┬────┬────┐       ┌────┬────┬────┐
                    │ 52   53   54 │       │ 55   56   57 │
                    ├────┼────┼────┤       ├────┼────┼────┤
                    │ 69   70   71 │       │ 72   73   74 │
                    └────┴────┴────┘       └────┴────┴────┘
*/

/****************************************************************/
                         /* Combos */
/****************************************************************/
	
    combos {
        compatible = "zmk,combos";

        /* Left Hand */
        ZMK_COMBO(combo_apos_lh,         24 25, &kp APOSTROPHE)      /* Top  row left hand, 0-gap */
        ZMK_COMBO(combo_asterisk_lh,     25 26, &kp STAR)            /* Top  row left hand, 0-gap */
        ZMK_COMBO(combo_exclamation_lh,  24 26, &kp EXCL)            /* Top  row left hand, 1-gap */

        ZMK_COMBO(combo_question_lh,     37 38, &kp QMARK)           /* Home row left hand, 0-gap */
/*        ZMK_COMBO(combo_grave_lh,        36 37, &kp GRAVE) */          /* Home row left hand, 0-gap */
        ZMK_COMBO(combo_app_switch,      36 37, &kp LA(LC(TAB)))     /* Home row left hand, 0-gap */
        ZMK_COMBO(combo_tab_lh,          36 38, &kp TAB)             /* Home row left hand, 1-gap */

        /* Right Hand */
        ZMK_COMBO(combo_lbracket_rh,     17 18, &kp LBKT)            /* Num  row right hand, 0-gap */
        ZMK_COMBO(combo_rbracket_rh,     18 19, &kp RBKT)            /* Num  row right hand, 0-gap */

        ZMK_COMBO(combo_lparantheses_rh, 29 30, &kp LPAR)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_rparantheses_rh, 30 31, &kp RPAR)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_and_rh,          28 29, &kp AMPS)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_equals_rh,       29 31, &kp EQUAL)           /* Top  row right hand, 1-gap */

        ZMK_COMBO(combo_lcurly_rh,       41 42, &kp LBRC)            /* Home row right hand, 0-gap */
        ZMK_COMBO(combo_rcurly_rh,       42 43, &kp RBRC)            /* Home row right hand, 0-gap */
        ZMK_COMBO(combo_tab_rh,          41 43, &kp TAB)             /* Home row right hand, 1-gap */

        ZMK_COMBO(combo_slash_rh,        59 60, &kp SLASH)           /* Btm  row right hand, 0-gap */
        ZMK_COMBO(combo_backslash_rh,    60 61, &kp BACKSLASH)       /* Btm  row right hand, 0-gap */

        ZMK_COMBO(combo_lessthan_rh,     75 76, &kp LT)              /* Bsmt row right hand, 0-gap */
        ZMK_COMBO(combo_greaterthan_rh,  76 77, &kp GT)              /* Bsmt row right hand, 0-gap */

        /* Both hands */
        ZMK_COMBO(combo_n0,              38 41, &kp N0)              /* Home row both hands, F & J */
        ZMK_COMBO(combo_dollasign,       38 43, &kp DOLLAR)          /* Home row both hands, F & L */

        ZMK_COMBO(combo_caps_word,       37 42, &caps_word)          /* Home row both hands, D & K */

        ZMK_COMBO(combo_percent,         36 43, &kp PERCENT)         /* Home row both hands, S & L */
    };

/*****************************************************************************/
                                /* Home Row Mods */
/*****************************************************************************/

HOME_ROW_MOD(lhm, RIGHT_HAND_KEYS THUMB_KEYS)
HOME_ROW_MOD(rhm, LEFT_HAND_KEYS THUMB_KEYS)

    caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE FSLH>;
    };

/*****************************************************************************/
                                /* Behaviors */
/*****************************************************************************/

    behaviors {

                      /* Sticky keys */

        skq: sticky_key_quick_release {
            compatible       = "zmk,behavior-sticky-key";
            label            = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells   = <1>;
            bindings         = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

                      /* Hold Taps */

        as: auto_shift {
            compatible       = "zmk,behavior-hold-tap";
            label            = "AUTO_SHIFT";
            #binding-cells   = <2>;
            tapping_term_ms  = <280>;
            quick_tap_ms     = <0>;
            flavor           = "tap-preferred";
            bindings         = <&kp>, <&kp>;
        };

        gqt: global-quick-tap {
            compatible       = "zmk,behavior-hold-tap";
            label            = "GLOBAL_QUICK_TAP";
            #binding-cells   = <2>;
            flavor           = "balanced";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <150>;
            global-quick-tap;
            bindings         = <&kp>, <&kp>;
        };

        ht_hp: hold_tap_hold_preferred {
            compatible       = "zmk,behavior-hold-tap";
            label            = "HOLD_TAB_HOLD_PREFERRED_kp";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <QUICK_TAP_MS>;
            global-quick-tap;
            bindings         = <&kp>, <&kp>;
        };

        ht_hpm: hold_tap_hold_preferred_mt {
            compatible       = "zmk,behavior-hold-tap";
            label            = "HOLD_TAB_HOLD_PREFERRED_MT";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <QUICK_TAP_MS>;
            global-quick-tap;
            bindings         = <&mt>, <&kp>;
        };

        gqt_th: global-quick-tap_th {
            compatible       = "zmk,behavior-hold-tap";
            label            = "GLOBAL_QUICK_TAP_TH";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <200>;
            bindings         = <&kp>, <&kp>;
        };

        gqt_mo: global-quick-tap-momentary-layer {
            compatible       = "zmk,behavior-hold-tap";
            label            = "GLOBAL_QUICK_TAP_MOMENTARY_LAYER";
            #binding-cells   = <2>;
            flavor           = "balanced";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <125>;
            global-quick-tap;
            bindings         = <&mo>, <&kp>;
        };

        mo_kp: mo_kp {
            compatible       = "zmk,behavior-hold-tap";
            label            = "HOLD_TAP_SHIFT_NUM";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <QUICK_TAP_MS>;
            bindings         = <&mo>, <&kp>;
        };

        htsn: ht_shft_num {
            compatible       = "zmk,behavior-hold-tap";
            label            = "HOLD_TAP_SHIFT_NUM";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <QUICK_TAP_MS>;
            bindings         = <&mo>, <&skq>;
        };

        ralt_rofi: ht_rofi_launcher {
            compatible       = "zmk,behavior-hold-tap";
            label            = "RALT_ROFI";
            #binding-cells   = <2>;
            flavor           = "hold-preferred";
            tapping-term-ms  = <TAPPING_TERM_MS>;
            quick-tap-ms     = <QUICK_TAP_MS>;
            bindings         = <&kp>, <&kp>;
        };

                      /* CAPS_WORD */

        b_caps_word: b_caps_word {
            compatible       = "zmk,behavior-caps-word";
            label            = "B_CAPS_WORD";
            #binding-cells   = <0>;
            continue-list    = <UNDERSCORE MINUS BACKSPACE DELETE FSLH>;
            mods             = <(MOD_LSFT | MOD_RSFT)>;
        };

                      /* MOD MORPH */
                      
        bspc_del: backspace_del {
            compatible       = "zmk,behavior-mod-morph";
            label            = "BACKSPACE_DELETE";
            #binding-cells   = <0>;
            bindings         = <&kp BACKSPACE>, <&kp DEL>;
            mods             = <(MOD_LCTL|MOD_RCTL)>;
        };

        colon_semi: colon_semi {
            compatible       = "zmk,behavior-mod-morph";
            label            = "COLON_SEMICOLON";
            #binding-cells   = <0>;
            bindings         = <&kp COLON>, <&kp SEMICOLON>;
            mods             = <(MOD_LSFT|MOD_RSFT)>;
        };

                      /* TAP DANCE */

        tddm: tap_delete_mvcl {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DELETE_MOVE_CLIENT";
            #binding-cells   = <0>;
            tapping-term-ms  = <TAPPING_TERM_MS>;
            bindings         = <&kp DELETE>, <&kp LG(S)>;
        };

        td_up_home: td_up_home {
            compatible       ="zmk,behavior-tap-dance";
            label            = "TAP_DANCE_PAGE_UP_HOME"; 
            #binding-cells   = <0>;
            tapping-term-ms  = <TAPPING_TERM_MS>;
              bindings         = <&kp PAGE_UP>, <&kp HOME>;
        };

        td_down_end: td_down_end {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_PAGE_DOWN_END"; 
            #binding-cells   = <0>;
            tapping-term-ms  = <TAPPING_TERM_MS>;
            bindings         = <&kp PAGE_DOWN>, <&kp END>;
        };

        td_sw: tap_sw {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_SELECT_WORD_W"; 
            #binding-cells   = <0>;
            tapping-term-ms  = <TAPPING_TERM_MS>;
            bindings         = <&sel_word>, <&ext_word>;
        };

        td_sl: tap_sl {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_SELECT_LINE_E";
            #binding-cells   = <0>;
            tapping-term-ms  = <TAPPING_TERM_MS>;
            bindings         = <&sel_line>, <&ext_line>;
        };       

        td_paste_undo: tap_paste_undo {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_PASTE_UNDO";
            #binding-cells   = <0>;
            tapping-term-ms  = <QUICK_TAP_MS>;
            bindings         = <&kp LC(V)>, <&kp LC(Z)>;
        };

        td_ct: tap_ct {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_COPY_CUT";
            #binding-cells   = <0>;
            tapping-term-ms  = <QUICK_TAP_MS>;
            bindings         = <&kp LC(C)>, <&kp LC(X)>;
        };

        td_ext: tap_ext {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_EXTENSIONS";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&kp LC(F8)>
                             , <&kp LC(F9)>
                             , <&kp LC(F10)>;
        };

        app_shift: app_shift {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_APPSWITCH";
            #binding-cells   = <0>;
            tapping-term-ms  = <200>;
            bindings         = <&gqt_th LGUI RETURN>
                             , <&alt_tab>;
        };

        left_thumb: left_thumb {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_TABS_SPACE_ALTTAB";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&gqt_th SPACE LC(TAB)>
                             , <&kp RC(RETURN)>;
        };

        right_thumb: right_thumb {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_TABS_LAST-WINDOW";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&kp LC(LS(TAB))>
                             , <&kp LG(ESCAPE)>;
        };

        td_tags: tap_tags {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_TAGS";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&gqt_th LALT LG(KP_N1)>
                             , <&kp LG(KP_N2)>
                             , <&kp LG(KP_N3)>
                             , <&kp LG(KP_N4)>;
        };

        trb1: trb_1 {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_THUMB_RIGHT_BOTTOM_1";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&ht_hpm RALT LA(SPACE)>
                             , <&kp LALT >;
        };

        trb2: trb_2 {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_THUMB_RIGHT_BOTTOM_2";
            #binding-cells   = <0>;
            tapping-term-ms  = <200>;
            bindings         = <&htsn 3 LSHFT>
                             , <&tog 3 >;
        };

        trb3: trb_3 {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_THUMB_RIGHT_BOTTOM_3";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&lt 1 RETURN>
                             , <&tog 1 >;
        };

        td_obs: tap_obs {
            compatible       = "zmk,behavior-tap-dance";
            label            = "TAP_DANCE_OBSIDIAN";
            #binding-cells   = <0>;
            tapping-term-ms  = <300>;
            bindings         = <&kp LC(LS(TAB))>
                             , <&kp LA(P)>
                             , <&kp LA(O)>;
        };
    };

/************************************************************/
                        /* Macros */
/************************************************************/ 

ZMKMACRO(alt_tab,
    wait-ms = <40>;
    tap-ms = <40>;
    bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp TAB>
        , <&macro_pause_for_release>
        , <&macro_release &kp LALT>;
)

FAST_MACRO(sel_word,
    bindings
        = <&macro_tap &kp LC(RIGHT)>
        , <&macro_wait_time 1>
        , <&macro_tap &kp LC(LEFT) &kp LC(LS(RIGHT))>;
)

FAST_MACRO(extend_word,
    bindings
        = <&macro_tap &kp LC(LS(RIGHT))>
)

FAST_MACRO(select_line,
    bindings
        = <&macro_tap &kp HOME &kp LS(END)>
)

FAST_MACRO(extend_line,
    bindings
        = <&macro_tap &kp LS(DOWN) &kp LS(END)>
)

ZMK_MACRO(win_home,
    wait-ms = <30>;
    tap-ms  = <40>;
    bindings 
            = <&kp PERCENT>
            , <&macro_press &kp LEFT_SHIFT>
            , <&kp U &kp S &kp E &kp R &kp P &kp R &kp O &kp F &kp I &kp L &kp E &kp PERCENT>
            , <&macro_release &kp LEFT_SHIFT>;
)

    macros {

        rgb_test: rgb_test {
            label = "RGB_TEST";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press &mo 1>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
                , <&macro_pause_for_release>
                , <&macro_release &mo 1>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
        };

        sel_word_old: select_word {
            compatible = "zmk,behavior-macro";
            label = "select_word";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_tap &kp LC(RIGHT)>
                , <&macro_wait_time 1> // let cursor move to the next word!
                , <&macro_tap &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        ext_word_old: extend_word {
            compatible = "zmk,behavior-macro";
            label = "extend_word";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings
            = <&macro_tap &kp LC(LS(RIGHT))>
            ;
        };

        sel_line_old: select_line {
            compatible = "zmk,behavior-macro";
            label = "select_line";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings
            = <&macro_tap &kp HOME &kp LS(END)>
            ;
        };

        ext_line_old: extend_line {
            compatible = "zmk,behavior-macro";
            label = "extend_line";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings
            = <&macro_tap &kp LS(DOWN) &kp LS(END)>
            ;
        };

    };

/************************************************************/
                        /* Keymap */
/************************************************************/
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭   Tapdance     ╮╭   Tapdance    ╮╭   Tapdance     ╮╭   Tapdance     ╮                                       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp F1        &kp F2        &kp  F3       &kp F4        &kp F5                                                                                                                                                    &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰ F8,F9,F10      ╯╰ Delete, Move C╯╰ LC(TAB),LC(RET)╯╰ LC(Tab),LG(ESC)╯                                       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp PIPE      &kp N1        &kp  N2       &kp N3        &kp N4        &kp N5                                                                                                                        &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &kp F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭   Holdtap      ╮╭   Layertap    ╮╭   Tapdance     ╮                                                         ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp AT_SIGN   &kp Q         &kp W         &kp E         &kp R         &kp T                                                                                                                         &kp Y         &kp U         &kp I         &kp O         &kp P         &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰ Win/Mod,Return ╯╰ Layer 3, SPACE╯╰ LAlt, GUI 1-4  ╯                                                         ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp APOS      &kp A        &lhm LCTRL S  &lhm LSHFT D   &gqt_mo 1 F   &kp G                                                                                                                         &kp H         &gqt_mo 1 J  &rhm RSHFT K  &rhm RCTRL L   &kp RETURN    &kp NUBS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭────────────────┬─────────────────┬─────────────────╮ ╭────────────────┬─────────────────┬─────────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp PSCRN     &kp Z         &kp X         &kp C         &kp V         &kp B           &td_ext          &tddm             &left_thumb         &right_thumb           &kp LA(P)   &kp LA(O)           &kp N         &kp M         &kp COMMA     &kp DOT       &kp MINUS     &to 0
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &magic 2 0    &kp ESCAPE    &bspc_del     &td_ct        &td_paste_undo                &app_shift       &lt 3 SPACE       &td_tags            &ht_hpm RALT LA(SPACE) &trb2       &trb3                             &bspc_del     &kp ESCAPE    &colon_semi   &kp UNDER     &rgb_test
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯ ╰────────────────┼─────────────────┼─────────────────╯ ╰────────────────┼─────────────────┼─────────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
            >;
        };

        layer_Lower {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                                    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp AT        &trans        &trans        &trans        &trans                                                                                                                        &kp TILDE     &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp EXCL      &kp DQT       &kp HASH      &kp DOLLAR    &kp PRCNT                                                                                                                     &kp N0        &td_down_end  &td_up_home  &kp LC(RIGHT) &kp DOLLAR    &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp CAPS      &trans        &trans        &trans        &trans        &trans                                                                                                                        &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp RA(L)     &kp RA(Z)
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭────────────────┬─────────────────┬─────────────────╮ ╭────────────────┬─────────────────┬─────────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans          &trans           &trans            &trans              &trans           &trans            &trans              &kp RCTRL     &kp LC(LEFT)  &td_sw        &kp LC(RIGHT) &kp trans     &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &magic 2 0    &trans        &trans        &kp ESCAPE    &trans                        &kp LCTRL        &trans            &trans              &trans           &trans            &kp trans                         &trans        &td_sl        &trans        &kp TILDE     &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_Magic {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &bt BT_CLR    &none         &none         &none         &none                                                                                                                                                     &none         &none         &none         &none         &bt BT_CLR_ALL
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none         &none                                                                                                                         &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none       &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                                                         &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                                                          &none         &none         &none         &none         &none         &bootloader
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭────────────────┬─────────────────┬─────────────────╮ ╭────────────────┬─────────────────┬─────────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &reset        &none         &none         &none         &none         &none           &bt_2            &bt_3             &none               &none            &none             &none               &none         &none         &none         &none         &none         &reset
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none                         &bt_0            &bt_1             &out OUT_USB        &none            &none             &none                             &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_NumPad {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                                      &kp KP_NUM   &trans       &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                                        &kp KP_MULTIPLY &trans       &trans       &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                                        &kp KP_SLASH    &kp KP_N7    &kp KP_N8    &kp KP_N9     &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &kp LG(PG_DN) &kp LG(LS(D)) &kp F11       &kp LS(G)                                                                                                                     &kp KP_PLUS     &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_ENTER  &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭────────────────┬─────────────────┬─────────────────╮ ╭────────────────┬─────────────────┬─────────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans          &trans           &trans            &trans              &trans           &trans            &trans              &kp KP_MINUS    &kp KP_N1    &kp KP_N2    &kp KP_N3     &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &kp ESC       &trans                        &trans           &trans            &trans              &trans           &kp SPACE         &trans                              &trans       &kp KP_N0    &kp DOT       &colon_semi   &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_trans {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                                               ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                                    &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                                        &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                                        &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                                               ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                                        &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭────────────────┬─────────────────┬─────────────────╮ ╭────────────────┬─────────────────┬─────────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans          &trans           &trans            &trans              &trans           &trans            &trans              &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├────────────────┼─────────────────┼─────────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans                        &trans           &trans            &trans              &trans           &trans            &trans                            &trans        &trans        &trans        &trans        &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰────────────────┴─────────────────┴─────────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

    };
};               /* <-- End of Root node */
