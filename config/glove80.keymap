/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

    /* Custom Defined Behaviors */
        // WIP

/************************************************************/
	
                        /* Timers */
			
/************************************************************/
	
#define QUICK_TAP_MS 200
#define TAPPING_TERM_MS 280
#define TAPPING_TERM_MS_SLOWER 250

/* How long Sticky Keys stay pressed */
#define STICKY_KEY_RELEASE_AFTER_MS 600

/* How long to hold for Autoshift */
#define AUTOSHIFT_TAPPING_TERM_MS 200

/* How long to hold to activate home row mods for same side or mouse usage */
#define HOME_ROW_MODS_TAPPING_TERM_MS 300

/* Cool down after typing before home row mods can be used */
#define HOME_ROW_MODS_QUICK_TAP_MS 150

/* How long thumb keys can be held before rolls send the higher layer key */
#define THUMBS_TAPPING_TERM_MS 200

/* How quickly to double tap thumb keys to hold down the key */
#define THUMBS_QUICK_TAP_MS 250

/* How long until the selection continuation mode times out */
#define CONTINUE_SELECTION_TIMEOUT 60000

/* How quickly combo keys must be pressed together */
#define COMBO_TIMEOUT_MS 50

/*****************************************************************************/

                                /* Key Positions */

/*****************************************************************************/

/* Use these key positions for Hold Tap hold-trigger-key-positions and Combos

          .----.----.----.                                                  .----.----.----.
.----.----|  2 |  3 |  4 |                                                  |  5 |  6 |  7 |----.----.
|  0 |  1 |----+----+----+----.                                        .----+----+----+----|  8 |  9 |
|----|----| 12 | 13 | 14 | 15 |                                        | 16 | 17 | 18 | 19 |----|----|
| 10 | 11 |----+----+----+----|                                        |----+----+----+----| 20 | 21 |
|----|----| 24 | 25 | 26 | 27 |                                        | 28 | 29 | 30 | 31 |----|----|
| 22 | 23 |----+----+----+----|                                        |----+----+----+----| 32 | 33 |
|----|----| 36 | 37 | 38 | 39 |                                        | 40 | 41 | 42 | 43 |----|----|
| 34 | 35 |----+----+----+----|                                        |----+----+----+----| 44 | 45 |
|----|----| 48 | 49 | 50 | 51 |                                        | 58 | 59 | 60 | 61 |----|----|
| 46 | 47 |----+----+----+----'                                        '----+----+----+----| 62 | 63 |
|----|----| 66 | 67 | 68 |       .----.                        .----.       | 75 | 76 | 77 |----|----|
| 64 | 65 |----'----'----'  .----| 52 |----.              .----| 57 |----.  '----'----'----| 78 | 79 |
'----'----'                 | 69 |----| 53 |----.    .----| 56 |----| 74 |                 '----'----'
                            '----| 70 |----| 54 |    | 55 |----| 73 |----'
                                 '----| 71 |----'    '----| 72 |----'
                                      '----'              '----'
*/

/************************************************************/
                        /* Combos */
/************************************************************/
	
/* Helper for defining combos using the timeout configured above */
#define ZMK_COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    NAME { \
        timeout-ms = <COMBO_TIMEOUT_MS>; \
        key-positions = <KEY_POSITIONS>; \
        bindings = <BINDINGS>; \
    };

combos {
    compatible = "zmk,combos";

    /* Left Hand */
    ZMK_COMBO(combo_quotes_lh,       24 25, &kp LS(N2))          /* Top  row left hand, 0-gap */
    ZMK_COMBO(combo_asterisk_lh,     25 26, &kp PIPE)            /* Top  row left hand, 0-gap */
    ZMK_COMBO(combo_exclamation_lh,  24 26, &kp LS(N1))          /* Top  row left hand, 1-gap */

    ZMK_COMBO(combo_question_lh,     37 38, &kp LS(MINUS))       /* Home row left hand, 0-gap */
    ZMK_COMBO(combo_grave_lh,        36 37, &kp LS(EQUAL))       /* Home row left hand, 0-gap */
    ZMK_COMBO(combo_tab_lh,          36 38, &kp TAB)             /* Home row left hand, 1-gap */

    /* Right Hand */
    ZMK_COMBO(combo_lbracket_rh,     17 18, &kp RA(N8))          /* Num  row right hand, 0-gap */
    ZMK_COMBO(combo_rbracket_rh,     18 19, &kp RA(N9))          /* Num  row right hand, 0-gap */

    ZMK_COMBO(combo_lparantheses_rh, 29 30, &kp LS(N8))          /* Top  row right hand, 0-gap */
    ZMK_COMBO(combo_rparantheses_rh, 30 31, &kp LPAR)            /* Top  row right hand, 0-gap */
    ZMK_COMBO(combo_and_rh,          28 29, &kp RS(N6))          /* Top  row right hand, 1-gap */

    ZMK_COMBO(combo_lcurly_rh,       41 42, &kp RA(N7))          /* Home row right hand, 0-gap */
    ZMK_COMBO(combo_rcurly_rh,       42 43, &kp RA(N0))          /* Home row right hand, 0-gap */
    ZMK_COMBO(combo_tab_rh,          41 43, &kp TAB)             /* Home row right hand, 1-gap */

    ZMK_COMBO(combo_greater_rh,      75 76, &kp NUBS)            /* Bsmt row right hand, 0-gap */
    ZMK_COMBO(combo_less_rh,         76 77, &kp RS(NUBS))        /* Bsmt row right hand, 0-gap */

    /* One gappers */
    ZMK_COMBO(combo_equals_rh,       29 31, &kp RS(N0))

    /* Both hands */

};

/************************************************************/
                      /* Behaviors */
/************************************************************/

#define STRINGIFY(x) #x

/* Create a ZMK behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...) \
    behaviors { \
        NAME: NAME { \
            label = STRINGIFY(ZB_ ## NAME); \
            __VA_ARGS__ \
        }; \
    };

/*****************************************************************************/
                                /* Home Row Mods */
/*****************************************************************************/

/* "Timerless" home row mod behavior using timers configured above */
#define HOME_ROW_MOD(NAME, KEY_POSITIONS)                                                                 \
    ZMK_BEHAVIOR(NAME, 											  \
        compatible                 = "zmk,behavior-hold-tap";                                             \
        #binding-cells             = <2>;                                                                 \
        flavor                     = "balanced";                        /* Fast hold behavior *           \
        tapping-term-ms            = <HOME_ROW_MODS_TAPPING_TERM_MS>;   /* Mouse usage */                 \
        quick-tap-ms               = <HOME_ROW_MODS_QUICK_TAP_MS>;      /* Typing cool down *             \
        global-quick-tap;                                               /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;                   /* Use opposite hand */           \
        bindings                   = <&kp>, <&kp>;                                                        \
    )

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    0  1  2  3  4      \
    10 11 12 13 14 15  \
    22 23 24 25 26 27  \
    34 35 36 37 38 39  \
    46 47 48 49 50 51  \
    64 65 66 67 68

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
        5  6  7  8  9   \
    16 17 18 19 20 21   \
    28 29 30 31 32 33   \
    40 41 42 43 44 45   \
    58 59 60 61 62 63   \
       75 76 77 78 79

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS       \
    52 53 54    55 56 57 \
    69 70 71    72 73 74

HOME_ROW_MOD(lhm, RIGHT_HAND_KEYS THUMB_KEYS)
HOME_ROW_MOD(rhm, LEFT_HAND_KEYS THUMB_KEYS)



    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
  &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
    &kp TAB     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
    &kp ESC     &kp A    &kp S     &kp D      &kp F   &kp G                                                                   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
  &kp GRAVE     &kp Z    &kp X     &kp C      &kp V   &kp B  &kp LSHFT  &kp LCTRL    &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic 2 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC    &kp DEL  &kp LALT  &kp RALT    &kp RET  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
      &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};