/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {         /* <-- Start of Root node */

    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
        // en_us version


/****************************************************************/
                         /* VARIABLES */
/****************************************************************/
	
#define COMBO_TIMEOUT_MS 50                /* How quickly combo keys must be pressed together */
#define TAPPING_TERM_MS 200
#define QUICK_TAP_MS 125
#define THUMB_TAP_MS 300
#define STICKY_KEY_RELEASE_AFTER_MS 600    /* How long Sticky Keys stay pressed */
#define HOME_ROW_MODS_TAPPING_TERM_MS 300  /* How long to hold to activate home row mods for same side or mouse usage */
#define HOME_ROW_MODS_QUICK_TAP_MS 150     /* Cool down after typing before home row mods can be used */

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    0  1  2  3  4      \
    10 11 12 13 14 15  \
    22 23 24 25 26 27  \
    34 35 36 37 38 39  \
    46 47 48 49 50 51  \
    64 65 66 67 68

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
        5  6  7  8  9   \
    16 17 18 19 20 21   \
    28 29 30 31 32 33   \
    40 41 42 43 44 45   \
    58 59 60 61 62 63   \
       75 76 77 78 79

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS       \
    52 53 54    55 56 57 \
    69 70 71    72 73 74

/****************************************************************/
                         /* Helper functions */
/****************************************************************/

/* Convert NAME parameters into a ZMK label string */
#define STRINGIFY(x) #x

/* COMBOS */
#define ZMK_COMBO(NAME, KEY_POSITIONS, BINDINGS)  \
    NAME {                                        \
        timeout-ms    = <COMBO_TIMEOUT_MS>;       \
        key-positions = <KEY_POSITIONS>;          \
        bindings      = <BINDINGS>;               \
    };

/* Create a ZMK behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...)                   \
    behaviors {                                   \
        NAME: NAME {                              \
            label = STRINGIFY(ZB_ ## NAME);       \
            __VA_ARGS__                           \
        };                                        \
    };

/* "Timerless" home row mod */
#define HOME_ROW_MOD(NAME, KEY_POSITIONS)                                                                 \
    ZMK_BEHAVIOR(NAME, 											                                                              \
        compatible                 = "zmk,behavior-hold-tap";                                             \
        #binding-cells             = <2>;                                                                 \
        flavor                     = "balanced";                        /* Fast hold behavior */          \
        tapping-term-ms            = <HOME_ROW_MODS_TAPPING_TERM_MS>;   /* Mouse usage */                 \
        quick-tap-ms               = <HOME_ROW_MODS_QUICK_TAP_MS>;      /* Typing cool down */            \
        global-quick-tap;                                               /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;                   /* Use opposite hand */           \
        bindings                   = <&kp>, <&kp>;                                                        \
    )

/* "Timerless" home row mod */
#define HOME_ROW_MOD_LT(NAME, KEY_POSITIONS)                                                                 \
    ZMK_BEHAVIOR(NAME, 											                                                              \
        compatible                 = "zmk,behavior-hold-tap";                                             \
        #binding-cells             = <2>;                                                                 \
        flavor                     = "balanced";                        /* Fast hold behavior */          \
        tapping-term-ms            = <HOME_ROW_MODS_TAPPING_TERM_MS>;   /* Mouse usage */                 \
        quick-tap-ms               = <HOME_ROW_MODS_QUICK_TAP_MS>;      /* Typing cool down */            \
        global-quick-tap;                                               /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;                   /* Use opposite hand */           \
        bindings                   = <&mo>, <&kp>;                                                        \
    )

/* Tap-dance helper */
#define TAP_DANCE_QUICK(NAME, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible      = "zmk,behavior-tap-dance"; \
        #binding-cells  = <0>; \
        tapping-term-ms = <TAPPING_TERM_MS>; \
        __VA_ARGS__ \
    )

/* Tap-dance helper with custom tapping-term-ms */
#define TAP_DANCE_CUSTOM(NAME, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-tap-dance"; \
        #binding-cells = <0>; \
        __VA_ARGS__ \
    )
                          
/* Hold-Tap helper */
#define HOLD_TAP(NAME, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-hold-tap"; \
        #binding-cells = <2>; \
        __VA_ARGS__ \
    )

/* Balanced Hold-Tap for home row mods and thumb layer keys */
#define HOLD_TAP_BALANCED(NAME, ...)   \
    HOLD_TAP(NAME,                     \
        flavor           = "balanced"; \
        __VA_ARGS__                    \
    )

/* Hold-preferred Hold-Tap */
#define HOLD_TAP_HOLD_PREFERRED(NAME, ...)    \
    HOLD_TAP(NAME,                            \
        flavor           = "hold-preferred";  \
        tapping-term-ms  = <TAPPING_TERM_MS>; \
        quick_tap_ms     = <QUICK_TAP_MS>;    \
        __VA_ARGS__                           \
    )

/* Mod-Morph helper */
#define MOD_MORPH(NAME, STANDARD, MORPHED, MODS) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <STANDARD>, <MORPHED>; \
        mods = <(MODS)>; \
    )

/* Mod-Morph that sends another key when Shift is held */
#define SHIFT_MORPH(NAME, LOWER, UPPER) \
    MOD_MORPH(NAME, LOWER, UPPER, MOD_LSFT|MOD_RSFT)

/* Wrap ZMK_MACRO to avoid needing to specify Macro node */
#define ZMKMACRO(NAME, ...) \
    macros { \
        ZMK_MACRO(NAME, __VA_ARGS__) \
    };

#define ZMK_MACRO_ZERO_PAR(name, ...) \
        behaviors { \
            name: name { \
                 label          = STRINGIFY(ZB_ ## NAME); \
                 compatible     = "zmk,behavior-macro"; \
                 #binding-cells = <0>; \
                 __VA_ARGS__ \
            }; \
        };

/* Instant key press Macro helper */
#define FAST_MACRO(NAME, BINDINGS) \
    ZMKMACRO(NAME, \
        tap-ms = <0>; \
        wait-ms = <0>; \
        bindings = <BINDINGS>; \
    )

/****************************************************************/
                         /* KEY POSITIONS */
/****************************************************************/
/* Use these key positions for Hold-Tap hold-trigger-key-positions and Combos

┌────┬────┬────┬────┬────┐                           ┌────┬────┬────┬────┬────┐
│ 0  │ 1  │ 2  │ 3  │ 4  │                           │ 5  │ 6  │ 7  │ 8  │ 9  │
├────┼────┼────┼────┼────┼────┐                 ┌────┼────┼────┼────┼────┼────┤
│ 10 │ 11 │ 12 │ 13 │ 14 │ 15 │                 │ 16 │ 17 │ 18 │ 19 │ 20 │ 21 │
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
│ 22 │ 23 │ 24 │ 25 │ 26 │ 27 │                 │ 28 │ 29 │ 30 │ 31 │ 32 │ 33 │
├────┼────┼────┼────┼────┼────┤                 ├────┼────┼────┼────┼────┼────┤
│ 34 │ 35 │ 36 │ 37 │ 38 │ 39 │                 │ 40 │ 41 │ 42 │ 43 │ 44 │ 45 │
├────┼─==─┼─==─┼─==─┼─==─┼────┤                 ├────┼─==─┼─==─┼─==─┼─==─┼────┤
│ 46 │ 47 │ 48 │ 49 │ 50 │ 51 │                 │ 58 │ 59 │ 60 │ 61 │ 62 │ 63 │
│────┼────┼────┼────┼────┼────┘                 └────┼────┼────┼────┼────┼────┤
│ 64 │ 65 │ 66 │ 67 │ 68 │                           │ 75 │ 76 │ 77 │ 78 │ 79 │
└────┴────┴────┴────┴────┘                           └────┴────┴────┴────┴────┘
                    ┌────┬────┬────┐       ┌────┬────┬────┐
                    │ 52   53   54 │       │ 55   56   57 │
                    ├────┼────┼────┤       ├────┼────┼────┤
                    │ 69   70   71 │       │ 72   73   74 │
                    └────┴────┴────┘       └────┴────┴────┘
*/

/****************************************************************/
                         /* Behavior Changes */
/****************************************************************/

    behaviors {

        behavior_caps_word {
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE FSLH>;
        };

        behavior_sticky_key {
            release-after-ms = <STICKY_KEY_RELEASE_AFTER_MS>;
            quick-release;
        };
    };

/****************************************************************/
                         /* Combos */
/****************************************************************/
	
    combos {
        compatible = "zmk,combos";

        /* Left Hand */
        ZMK_COMBO(combo_asterisk_lh,     25 26, &kp STAR)            /* R & E, Top  row left hand, 0-gap */
        ZMK_COMBO(combo_exclamation_lh,  24 26, &kp EXCL)            /* R & W, Top  row left hand, 1-gap */
        ZMK_COMBO(combo_at_lh,           24 25, &kp AT)              /* E & W, Top  row left hand, 0-gap */

        ZMK_COMBO(combo_question_lh,     37 38, &kp QMARK)           /* F & D, Home row left hand, 0-gap */
        ZMK_COMBO(combo_tab_lh,          36 38, &kp TAB)             /* F & S, Home row left hand, 1-gap */
        ZMK_COMBO(combo_quotes_lh,       36 37, &kp DQT)             /* D & S, Home row left hand, 0-gap */

        /* Right Hand */
        ZMK_COMBO(combo_lbracket_rh,     17 18, &kp LBKT)            /* Num  row right hand, 0-gap */
        ZMK_COMBO(combo_rbracket_rh,     18 19, &kp RBKT)            /* Num  row right hand, 0-gap */

        ZMK_COMBO(combo_lparantheses_rh, 29 30, &kp LPAR)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_rparantheses_rh, 30 31, &kp RPAR)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_and_rh,          28 29, &kp AMPS)            /* Top  row right hand, 0-gap */
        ZMK_COMBO(combo_equals_rh,       29 31, &kp EQUAL)           /* Top  row right hand, 1-gap */

        ZMK_COMBO(combo_lcurly_rh,       41 42, &kp LBRC)            /* Home row right hand, 0-gap */
        ZMK_COMBO(combo_rcurly_rh,       42 43, &kp RBRC)            /* Home row right hand, 0-gap */
        ZMK_COMBO(combo_tab_rh,          41 43, &kp TAB)             /* Home row right hand, 1-gap */

        ZMK_COMBO(combo_slash_rh,        59 60, &kp SLASH)           /* Btm  row right hand, 0-gap */
        ZMK_COMBO(combo_backslash_rh,    60 61, &kp BACKSLASH)       /* Btm  row right hand, 0-gap */

        ZMK_COMBO(combo_lessthan_rh,     75 76, &kp LT)              /* Bsmt row right hand, 0-gap */
        ZMK_COMBO(combo_greaterthan_rh,  76 77, &kp GT)              /* Bsmt row right hand, 0-gap */

        /* Both hands */
        ZMK_COMBO(combo_n0,              38 41, &kp N0)              /* Home row both hands, F & J */
        ZMK_COMBO(combo_dollasign,       38 43, &kp DOLLAR)          /* Home row both hands, F & L */

        ZMK_COMBO(combo_caps_word,       37 42, &caps_word)          /* Home row both hands, D & K */

        ZMK_COMBO(combo_percent,         36 43, &kp PERCENT)         /* Home row both hands, S & L */
        ZMK_COMBO(combo_caret,           25 30, &kp CARET)           /* Home row both hands, E & I */
        ZMK_COMBO(combo_grave,           48 61, &kp GRAVE)           /* Home row both hands, X & C */
    };

/*****************************************************************************/
                                /* Home Row Mods */
/*****************************************************************************/

HOME_ROW_MOD(lhm, RIGHT_HAND_KEYS THUMB_KEYS)
HOME_ROW_MOD(rhm, LEFT_HAND_KEYS THUMB_KEYS)

HOME_ROW_MOD_LT(lhmlt, RIGHT_HAND_KEYS THUMB_KEYS)
HOME_ROW_MOD_LT(rhmlt, LEFT_HAND_KEYS THUMB_KEYS)

/*****************************************************************************/
                                /* Behaviors Functions */
/*****************************************************************************/

SHIFT_MORPH(colon_semi, &kp COLON, &kp SEMICOLON)
SHIFT_MORPH(comma_semi, &td_comma_semi, &kp SEMICOLON)

HOLD_TAP_HOLD_PREFERRED(ht_hp,  bindings = <&kp>, <&kp>;)
HOLD_TAP_HOLD_PREFERRED(ht_hpm, bindings = <&mt>, <&kp>;)

HOLD_TAP(ht_mo_kp, 
    flavor = "tap-preferred";
    tapping-term-ms = <125>;
    quick_tap_ms    = <120>;
    bindings        = <&mo>, <&kp>;)

HOLD_TAP(rh_th_5, 
    flavor = "hold-preferred";
    tapping-term-ms = <THUMB_TAP_MS>;
    quick_tap_ms    = <100>;
    bindings        = <&mo>, <&sk>;)

TAP_DANCE_QUICK(td_up_home,     bindings = <&kp PAGE_UP>,   <&kp HOME>;)
TAP_DANCE_QUICK(td_down_end,    bindings = <&kp PAGE_DOWN>, <&kp DOWN>;)
TAP_DANCE_QUICK(td_sw,          bindings = <&sel_word>,     <&ext_word>;)
TAP_DANCE_QUICK(td_sl,          bindings = <&sel_line>,     <&ext_line>;)
TAP_DANCE_QUICK(td_paste_undo,  bindings = <&kp LC(V)>,     <&kp LC(Z)>;)
TAP_DANCE_QUICK(td_copy_paste,  bindings = <&kp LC(C)>,     <&kp LC(V)>;)

TAP_DANCE_CUSTOM(td_comma_semi, tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp COMMA>,     <&kp SEMICOLON>;)

TAP_DANCE_CUSTOM(td_dot_sk,     tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp DOT>,       <&dot_sk>;)

TAP_DANCE_CUSTOM(lth_1,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp LC(F8)>,    <&kp LC(F9)>,   <&kp LC(F10)>;)

TAP_DANCE_QUICK(lth_2,          bindings = <&kp DELETE>,    <&kp LG(S)>;)

TAP_DANCE_CUSTOM(lth_3,         tapping-term-ms = <TAPPING_TERM_MS>;
                                bindings = <&ht_hp SPACE LC(TAB)>, <&kp LG(ESCAPE)>;)

TAP_DANCE_CUSTOM(lth_4,         tapping-term-ms = <TAPPING_TERM_MS>;
                                bindings = <&ht_mo_kp 2 RETURN>, <&kp LC(RETURN)>;)

TAP_DANCE_CUSTOM(lth_5,         tapping-term-ms = <TAPPING_TERM_MS>;
                                bindings = <&ht_hp LGUI SPACE>, <&kp LG(D)>;)

TAP_DANCE_CUSTOM(lth_6,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings        = 
                                  <&ht_hp LALT LG(KP_N1)>
                                , <&kp LG(KP_N2)>
                                , <&kp LG(KP_N3)>
                                , <&kp LG(KP_N4)>;)

TAP_DANCE_CUSTOM(rth_1,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp LC(LS(TAB))>, <&kp LG(E)>;)      /* TBD */

TAP_DANCE_CUSTOM(rth_2,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp LA(P)>, <&kp LG(E)>;)            /* VURDER */

TAP_DANCE_CUSTOM(rth_3,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&kp LA(O)>, <&tog 2>;)               /* VURDER */

TAP_DANCE_CUSTOM(rth_4,         tapping-term-ms = <THUMB_TAP_MS>;
                                bindings = <&ht_hpm RALT LA(SPACE)>, <&to 0>;)   /* TBD */

TAP_DANCE_CUSTOM(rth_5,         tapping-term-ms = <200>;
                                bindings = <&rh_th_5 2 LSHFT>, <&kp LG(ESCAPE)>;) /* TBD */

TAP_DANCE_CUSTOM(rth_6,         tapping-term-ms = <TAPPING_TERM_MS>;
                                bindings = <&kp RETURN>, <&kp LG(F)>;)

/************************************************************/
                        /* Macros */
/************************************************************/ 

ZMKMACRO(rgb_test,
    wait-ms = <0>;
    tap-ms = <0>;
    bindings
        = <&macro_press &mo 1>
        , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
        , <&macro_pause_for_release>
        , <&macro_release &mo 1>
        , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
)

FAST_MACRO(sel_word,
        &macro_tap &kp LC(RIGHT)
        &macro_wait_time 1
        &macro_tap &kp LC(LEFT) &kp LC(LS(RIGHT))
)

FAST_MACRO(ext_word, 
        &macro_tap &kp LC(LS(RIGHT))
)

FAST_MACRO(sel_line, 
        &macro_tap &kp HOME &kp LS(END)
)

FAST_MACRO(ext_line, 
        &macro_tap &kp LS(DOWN) &kp LS(END)
)

FAST_MACRO(dot_sk,
        &macro_tap &kp DOT
        &macro_tap &kp SPACE
        &macro_tap &sk LSHFT
        )

/************************************************************/
                        /* Keymap */
/************************************************************/

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp F1        &kp F2        &kp  F3       &kp F4        &kp F5                                                                                                                                  &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp PIPE      &kp N1        &kp  N2       &kp N3        &kp N4        &kp N5                                                                                                      &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &kp F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp AT_SIGN   &kp Q         &kp W         &kp E         &kp R         &kp T                                                                                                       &kp Y         &kp U         &kp I         &kp O         &kp P         &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp APOS      &kp A        &lhm LCTRL S  &lhm LSHFT D   &lhmlt 1 F    &kp G                                                                                                       &kp H         &rhmlt 1 J    &rhm RSHFT K  &rhm RCTRL L  &kp RETURN    &kp NUBS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────┬──────────────┬──────────────╮ ╭─────────────┬──────────────┬──────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp PSCRN     &kp Z         &kp X         &kp C         &kp V         &kp B           &lth_1        &lth_2         &lth_3           &rth_1        &rth_2         &rth_3           &kp N         &kp M         &td_comma_semi &td_dot_sk   &kp MINUS     &to 0
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &magic 3 0    &kp LG(ESC)   &kp BSPC      &kp ESC       &td_copy_paste                &lth_4        &lth_5         &lth_6           &rth_4        &rth_5         &rth_6                         &kp BSPC      &kp ESCAPE    &colon_semi   &kp UNDER     &rgb_test
// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
            >;
        };

        layer_Lower {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                  &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp AT        &trans        &trans        &trans        &trans                                                                                                      &kp TILDE     &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &kp EXCL      &kp DQT       &kp HASH      &kp DOLLAR    &kp PRCNT                                                                                                   &kp N0        &td_down_end  &td_up_home  &kp LC(RIGHT)  &kp DOLLAR    &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp CAPS      &trans        &trans        &trans        &trans        &trans                                                                                                      &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp RA(L)     &kp RA(Z)
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────┬──────────────┬──────────────╮ ╭─────────────┬──────────────┬──────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans          &trans        &trans         &trans           &trans        &trans         &trans           &kp RCTRL     &kp LC(LEFT)  &td_sw        &kp LC(RIGHT) &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &magic 3 0    &trans        &trans        &trans        &trans                        &trans        &trans         &trans           &trans        &trans         &trans                         &trans        &td_sl        &trans        &kp TILDE     &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_NumPad {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                    &kp KP_NUM   &trans       &trans        &trans        &kp CLEAR
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                      &kp KP_MULTIPLY &trans       &trans       &trans        &trans        &kp C_PWR
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &kp HOME      &kp PG_UP     &trans                                                                                                      &kp KP_SLASH    &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp PSCRN     &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &kp LEFT      &kp UP        &kp DOWN      &kp RIGHT                                                                                                   &kp KP_PLUS     &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_ENTER  &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────┬──────────────┬──────────────╮ ╭─────────────┬──────────────┬──────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &kp END       &kp PG_DN     &trans          &trans        &trans         &trans           &trans        &trans         &trans           &kp KP_MINUS    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp COMMA     &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &kp K_APP     &kp K_COPY                    &trans        &trans         &trans           &trans        &trans         &trans                           &trans       &kp KP_N0    &kp DOT       &colon_semi   &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_Magic {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &bt BT_CLR    &none         &none         &none         &none                                                                                                                                   &none         &none         &none         &none         &bt BT_CLR_ALL
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none         &none                                                                                                       &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none      &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                                        &none         &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                                        &none         &none         &none         &none         &none         &bootloader
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────┬──────────────┬──────────────╮ ╭─────────────┬──────────────┬──────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &reset        &none         &none         &none         &none         &none           &bt_2         &bt_3          &none            &none         &none          &none            &none         &none         &none         &none         &none         &reset
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none                         &bt_0         &bt_1          &out OUT_USB     &none         &none          &none                          &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

        layer_trans {
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &trans        &trans        &trans        &trans        &trans                                                                                                                                  &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                      &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                      &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans                                                                                                      &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────┬──────────────┬──────────────╮ ╭─────────────┬──────────────┬──────────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans        &trans          &trans        &trans         &trans           &trans        &trans         &trans           &trans        &trans        &trans        &trans        &trans        &trans
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼──────────────┼──────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &trans        &trans        &trans        &trans        &trans                        &trans        &trans         &trans           &trans        &trans         &trans                         &trans        &trans        &trans        &trans        &trans
// ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴──────────────┴──────────────╯ ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
            >;
        };

    };
};               /* <-- End of Root node */
