
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
/ {
        // WIP

/************************************************************/
	
                        /* Timers */
			
/************************************************************/
	
#define QUICK_TAP_MS 200
#define TAPPING_TERM_MS 280
#define TAPPING_TERM_MS_SLOWER 250

/* How long Sticky Keys stay pressed */
#define STICKY_KEY_RELEASE_AFTER_MS 600

/* How long to hold for Autoshift */
#define AUTOSHIFT_TAPPING_TERM_MS 200

/* How long to hold to activate home row mods for same side or mouse usage */
#define HOME_ROW_MODS_TAPPING_TERM_MS 300

/* Cool down after typing before home row mods can be used */
#define HOME_ROW_MODS_QUICK_TAP_MS 150

/* How long thumb keys can be held before rolls send the higher layer key */
#define THUMBS_TAPPING_TERM_MS 200

/* How quickly to double tap thumb keys to hold down the key */
#define THUMBS_QUICK_TAP_MS 250

/* How long until the selection continuation mode times out */
#define CONTINUE_SELECTION_TIMEOUT 60000

/* How quickly combo keys must be pressed together */
#define COMBO_TIMEOUT_MS 50

/*****************************************************************************/

                                /* Key Positions */

/*****************************************************************************/

/* Use these key positions for Hold Tap hold-trigger-key-positions and Combos

          .----.----.----.                                                  .----.----.----.
.----.----|  2 |  3 |  4 |                                                  |  5 |  6 |  7 |----.----.
|  0 |  1 |----+----+----+----.                                        .----+----+----+----|  8 |  9 |
|----|----| 12 | 13 | 14 | 15 |                                        | 16 | 17 | 18 | 19 |----|----|
| 10 | 11 |----+----+----+----|                                        |----+----+----+----| 20 | 21 |
|----|----| 24 | 25 | 26 | 27 |                                        | 28 | 29 | 30 | 31 |----|----|
| 22 | 23 |----+----+----+----|                                        |----+----+----+----| 32 | 33 |
|----|----| 36 | 37 | 38 | 39 |                                        | 40 | 41 | 42 | 43 |----|----|
| 34 | 35 |----+----+----+----|                                        |----+----+----+----| 44 | 45 |
|----|----| 48 | 49 | 50 | 51 |                                        | 58 | 59 | 60 | 61 |----|----|
| 46 | 47 |----+----+----+----'                                        '----+----+----+----| 62 | 63 |
|----|----| 66 | 67 | 68 |       .----.                        .----.       | 75 | 76 | 77 |----|----|
| 64 | 65 |----'----'----'  .----| 52 |----.              .----| 57 |----.  '----'----'----| 78 | 79 |
'----'----'                 | 69 |----| 53 |----.    .----| 56 |----| 74 |                 '----'----'
                            '----| 70 |----| 54 |    | 55 |----| 73 |----'
                                 '----| 71 |----'    '----| 72 |----'
                                      '----'              '----'
*/

/************************************************************/
                        /* Combos */
/************************************************************/
	
/* Helper for defining combos using the timeout configured above */
#define ZMK_COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    NAME { \
        timeout-ms = <COMBO_TIMEOUT_MS>; \
        key-positions = <KEY_POSITIONS>; \
        bindings = <BINDINGS>; \
    };

combos {
    compatible = "zmk,combos";

    /* Left Hand */
    ZMK_COMBO(combo_quotes_lh,       24 25, &kp LS(N2))          /* Top  row left hand, 0-gap */
    ZMK_COMBO(combo_asterisk_lh,     25 26, &kp PIPE)            /* Top  row left hand, 0-gap */
    ZMK_COMBO(combo_exclamation_lh,  24 26, &kp LS(N1))          /* Top  row left hand, 1-gap */

    ZMK_COMBO(combo_question_lh,     37 38, &kp LS(MINUS))       /* Home row left hand, 0-gap */
    ZMK_COMBO(combo_grave_lh,        36 37, &kp LS(EQUAL))       /* Home row left hand, 0-gap */
    ZMK_COMBO(combo_tab_lh,          36 38, &kp TAB)             /* Home row left hand, 1-gap */

    /* Right Hand */
    ZMK_COMBO(combo_lbracket_rh,     17 18, &kp RA(N8))          /* Num  row right hand, 0-gap */
    ZMK_COMBO(combo_rbracket_rh,     18 19, &kp RA(N9))          /* Num  row right hand, 0-gap */

    ZMK_COMBO(combo_lparantheses_rh, 29 30, &kp LS(N8))          /* Top  row right hand, 0-gap */
    ZMK_COMBO(combo_rparantheses_rh, 30 31, &kp LPAR)            /* Top  row right hand, 0-gap */
    ZMK_COMBO(combo_and_rh,          28 29, &kp RS(N6))          /* Top  row right hand, 1-gap */

    ZMK_COMBO(combo_lcurly_rh,       41 42, &kp RA(N7))          /* Home row right hand, 0-gap */
    ZMK_COMBO(combo_rcurly_rh,       42 43, &kp RA(N0))          /* Home row right hand, 0-gap */
    ZMK_COMBO(combo_tab_rh,          41 43, &kp TAB)             /* Home row right hand, 1-gap */

    ZMK_COMBO(combo_greater_rh,      75 76, &kp NUBS)            /* Bsmt row right hand, 0-gap */
    ZMK_COMBO(combo_less_rh,         76 77, &kp RS(NUBS))        /* Bsmt row right hand, 0-gap */

    /* One gappers */
    ZMK_COMBO(combo_equals_rh,       29 31, &kp RS(N0))

    /* Both hands */
    ZMK_COMBO(combo_caps_word,       37 42, &b_caps_word)        /* Home row both hands, 1 finger*/

};


/************************************************************/
                      /* Behaviors */
/************************************************************/

#define STRINGIFY(x) #x
/* Create a ZMK behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...)             \
    behaviors {                             \
        NAME: NAME {                        \
            label = STRINGIFY(ZB_ ## NAME); \
            __VA_ARGS__                     \
        };                                  \
    };  

/*****************************************************************************/
                                /* Home Row Mods */
/*****************************************************************************/

/* "Timerless" home row mod behavior using timers configured above */
#define HOME_ROW_MOD(NAME, KEY_POSITIONS)                                                                 \
    ZMK_BEHAVIOR(NAME, 											  \
        compatible                 = "zmk,behavior-hold-tap";                                             \
        #binding-cells             = <2>;                                                                 \
        flavor                     = "balanced";                        /* Fast hold behavior *           \
        tapping-term-ms            = <HOME_ROW_MODS_TAPPING_TERM_MS>;   /* Mouse usage */                 \
        quick-tap-ms               = <HOME_ROW_MODS_QUICK_TAP_MS>;      /* Typing cool down *             \
        global-quick-tap;                                               /* Lockout when typing quickly */ \
        hold-trigger-key-positions = <KEY_POSITIONS>;                   /* Use opposite hand */           \
/*        hold-trigger-on-release;                                        /* Enable chording mods */        \*/
        bindings                   = <&kp>, <&kp>;                                                        \
    )

/* Left hand key positions for use with right hand mods */
#define LEFT_HAND_KEYS \
    0  1  2  3  4      \
    10 11 12 13 14 15  \
    22 23 24 25 26 27  \
    34 35 36 37 38 39  \
    46 47 48 49 50 51  \
    64 65 66 67 68

/* Right hand key positions for use with left hand mods */
#define RIGHT_HAND_KEYS \
        5  6  7  8  9   \
    16 17 18 19 20 21   \
    28 29 30 31 32 33   \
    40 41 42 43 44 45   \
    58 59 60 61 62 63   \
       75 76 77 78 79

/* Thumb key positions for use with mods on both hands */
#define THUMB_KEYS       \
    52 53 54    55 56 57 \
    69 70 71    72 73 74

HOME_ROW_MOD(lhm, RIGHT_HAND_KEYS THUMB_KEYS)
HOME_ROW_MOD(rhm, LEFT_HAND_KEYS THUMB_KEYS)



behaviors {

                      /* Sticky keys */

    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
      };

                      /* Hold Taps */

    as: auto_shift {
        compatible =      "zmk,behavior-hold-tap";
        label =           "AUTO_SHIFT";
        #binding-cells =  <2>;
        tapping_term_ms = <280>;
        quick_tap_ms =    <0>;
        flavor =          "tap-preferred";
        bindings =        <&kp>, <&kp>;
    };

    gqt: global-quick-tap {
        compatible      = "zmk,behavior-hold-tap";
        label           = "GLOBAL_QUICK_TAP";
        #binding-cells  = <2>;
        flavor          = "balanced";
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms    = <150>;
        global-quick-tap;
        bindings =        <&kp>, <&kp>;
    };

    gqt_th: global-quick-tap_th {
        compatible      = "zmk,behavior-hold-tap";
        label           = "GLOBAL_QUICK_TAP_TH";
        #binding-cells  = <2>;
        flavor          = "hold-preferred";
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms    = <200>;
        bindings        = <&kp>, <&kp>;
    };

    htsn: ht_shft_num {
	compatible      = "zmk,behavior-hold-tap";
        label           = "HOLD_TAP_SHIFT_NUM";
        #binding-cells  = <2>;
        flavor          = "hold-preferred";
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms    = <QUICK_TAP_MS>;
        bindings        = <&mo>, <&skq>;
    };

    gqt_mo: global-quick-tap-momentary-layer {
        compatible =      "zmk,behavior-hold-tap";
        label =           "GLOBAL_QUICK_TAP_MOMENTARY_LAYER";
        #binding-cells =  <2>;
        flavor =          "balanced";
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms =    <125>;
        global-quick-tap;
        bindings =        <&mo>, <&kp>;
    };

                      /* CAPS_WORD */
    b_caps_word: b_caps_word {
        compatible =      "zmk,behavior-caps-word";
        label =           "B_CAPS_WORD";
        #binding-cells =  <0>;
        continue-list =   <UNDERSCORE MINUS BACKSPACE DELETE FSLH>;
        mods =            <(MOD_LSFT | MOD_RSFT)>;
    };

                      /* MOD MORPH */
    bspc_undo: backspace_undo {
        compatible =      "zmk,behavior-mod-morph";
        label =           "BACKSPACE_UNDO";
        #binding-cells =  <0>;
        bindings =        <&kp BACKSPACE>, <&kp LC(Z)>;
        mods =            <(MOD_RCTL)>;
    };

                      /* TAP DANCE */

    tddm: tap_delete_mvcl {
        compatible        = "zmk,behavior-tap-dance";
	      label             = "TAP_DELETE_MOVE_CLIENT";
        #binding-cells    = <0>;
        tapping-term-ms   = <TAPPING_TERM_MS>;
        bindings          = <&kp DELETE>, <&kp LG(R)>;
    };

    td_up_home: td_up_home {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_PAGE_UP_HOME"; 
        #binding-cells =  <0>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        bindings =        <&kp UP>, <&kp HOME>;
    };

    td_down_end: td_down_end {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_PAGE_DOWN_END"; 
        #binding-cells =  <0>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        bindings =        <&kp DOWN>, <&kp END>;
    };

    td_sw: tap_sw {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_SELECT_WORD_W"; 
        #binding-cells =  <0>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        bindings =        <&kp W>, <&sel_word>, <&ext_word>;
    };

    td_sl: tap_sl {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_SELECT_LINE_E";
        #binding-cells =  <0>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        bindings =        <&kp E>, <&sel_line>, <&ext_line>;
    };       

    td_cp: tap_cp {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_COPY";
        #binding-cells =  <0>;
        tapping-term-ms = <QUICK_TAP_MS>;
        bindings =        <&kp C>, <&kp LC(C)>;
    };

    td_paste: tap_paste {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_PASTE";
        #binding-cells =  <0>;
        tapping-term-ms = <QUICK_TAP_MS>;
        bindings =        <&kp V>, <&kp LC(V)>;
		};

    td_cut: tap_cut {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_CUT";
        #binding-cells =  <0>;
        tapping-term-ms = <QUICK_TAP_MS>;
        bindings =        <&kp X>, <&kp LC(X)>;
    };

    td_ext: tap_ext {
        compatible =       "zmk,behavior-tap-dance";
        label =            "TAP_DANCE_EXTENSIONS";
        #binding-cells =   <0>;
        tapping-term-ms =  <300>;
        bindings =         <&kp LC(F8)>, <&kp LC(F9)>, <&kp LC(F10)>;
    };

    td_tags: tap_tags {
        compatible =      "zmk,behavior-tap-dance";
        label =           "TAP_DANCE_TAGS";
        #binding-cells =  <0>;
        tapping-term-ms = <300>;
        bindings =        <&gqt_th LALT LG(KP_N1)>, <&kp LG(KP_N2)>, <&kp LG(KP_N3)>, <&kp LG(KP_N4)>;
    };

    td_obs: tap_obs {
        compatible =       "zmk,behavior-tap-dance";
        label =            "TAP_DANCE_OBSIDIAN";
        #binding-cells =   <0>;
        tapping-term-ms =  <300>;
        bindings =         <&kp LC(LS(TAB))>, <&kp LA(P)>, <&kp LA(O)>;
    };

};

/************************************************************/
	
                        /* Macros */
			
/************************************************************/ 


macros {

    rgb_test: rgb_test {
        label = "RGB_TEST";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press &mo 1>
            , <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,100)>
            , <&macro_pause_for_release>
            , <&macro_release &mo 1>
            , <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,50)>;
    };

    sel_word: select_word {
        compatible = "zmk,behavior-macro";
        label = "select_word";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
            = <&macro_tap &kp LC(RIGHT)>
            , <&macro_wait_time 1> // let cursor move to the next word!
            , <&macro_tap &kp LC(LEFT) &kp LC(LS(RIGHT))>;
    };

    ext_word: extend_word {
        compatible = "zmk,behavior-macro";
        label = "extend_word";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LC(LS(RIGHT))>
        ;
    };

    sel_line: select_line {
        compatible = "zmk,behavior-macro";
        label = "select_line";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp HOME &kp LS(END)>
        ;
    };

    ext_line: extend_line {
        compatible = "zmk,behavior-macro";
        label = "extend_line";
        #binding-cells = <0>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings
        = <&macro_tap &kp LS(DOWN) &kp LS(END)>
        ;
    };
};

    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";

/*
|   1      |    2      |    3        |     4      |    5      |     6      |    7        |    8            |    9          |    10             |     11        |    12       |    13      |    14      |    15      |    16      |    17      |   18 |
*/
        layer_Base {
            bindings = <
 &kp F1     &kp F2      &kp  F3       &kp  F4      &kp F5                                                                                                                                  &kp F6       &kp F7       &kp F8       &kp F9       &kp F10
 &to 0      &kp N1      &kp  N2       &kp  N3      &kp N4      &kp  N5                                                                                                        &kp N6       &kp N7       &kp N8       &kp N9       &kp N0       &kp F11
 &kp RA(N2) &as LS(Q) Q &as  LS(W) W  &as  LS(E) E &as LS(R) R &as  LS(T) T                                                                                                   &as LS(Y) Y  &as LS(U) U  &as LS(I) I  &as LS(O) O  &as LS(P) P  &kp F12
 &kp NUHS   &as LS(A) A &lhm LCTRL S  &lhm LSHFT D &gqt_mo 1 F &as  LS(G) G                                                                                                   &as LS(H) H  &gqt_mo 1 J  &rhm RSHFT K &rhm RCTRL L &kp RET      &kp EQUAL
 &kp PSCRN  &as LS(Z) Z &as  LS(X) X  &as  LS(C) C &as LS(V) V &as  LS(B) B &td_ext       &tddm            &gqt LALT LC(TAB) &kp LC(LS(TAB))     &kp LA(P)      &kp LA(O)     &as LS(N) N  &as LS(M) M  &kp COMMA    &kp DOT      &kp FSLH     &none
 &magic 2 0 &kp ESC     &kp  BSPC     &kp  LC(C)   &kp LC(V)                &gqt LGUI RET &gqt_mo 5 SPACE  &td_tags          &gqt_mo 1 LA(SPACE) &htsn 5 LSHIFT &gqt RGUI RET              &bspc_undo   &kp ESC      &kp LC(Z)    &kp RS(FSLH) &rgb_test
     >;
 };

        layer_Lower {
            bindings = <
 &trans     &trans     &trans        &trans        &trans                                                                                                                                  &kp C_MUTE    &kp C_VOL_DN &kp C_VOL_UP &trans     &trans
 &trans     &kp RA(N2) &trans        &trans        &trans      &trans                                                                                                         &kp RA(RBKT) &kp TILDE     &trans       &trans       &trans     &trans
 &trans     &kp RS(N1) &kp RS(N2)    &kp RS(N3)    &kp RA(N4)  &kp RS(N5)                                                                                                     &trans       &kp LC(LEFT)  &td_up_home  &trans       &kp LBKT   &trans
 &kp CAPS   &kp TAB    &kp RC(LEFT)  &sel_word     &ext_word   &kp LC(RIGHT)                                                                                                  &kp LEFT     &kp DOWN      &kp UP       &kp RIGHT    &kp SEMI   &kp SQT
 &trans     &trans     &kp LC(X)     &kp LC(C)     &trans      &trans      &trans          &trans          &trans            &trans              &trans         &trans        &trans       &kp LC(RIGHT) &td_down_end &trans       &trans     &trans
 &magic 2 0 &trans     &trans        &trans        &trans                  &kp LCTRL       &trans          &trans            &trans              &trans         &kp RCTRL                  &trans        &trans       &kp RA(EQUAL) &trans    &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Navigation {
            bindings = <
 &trans       &trans    &trans           &trans       &trans                                                                                      &trans          &trans          &trans          &trans  &trans
 &trans       &trans    &trans           &trans       &trans       &trans                                                         &trans  &kp RG(RS(N1))  &kp RG(RS(N2))  &kp RG(RS(N3))  &kp RG(RS(N4))  &trans
 &trans       &trans    &trans  &kp LC(LS(TAB))  &kp LC(TAB)  &kp LA(TAB)                                                          &kp Y        &kp HOME       &kp PG_UP   &kp RG(RC(O))          &trans  &trans
 &trans  &kp LA(TAB)  &kp HOME        &kp PG_UP    &kp PG_DN      &kp END                                                  &kp RG(RC(H))    &kp RG(LEFT)   &kp RG(RIGHT)   &kp RG(RC(L))          &trans  &trans
 &trans       &trans  &kp LEFT           &kp UP     &kp DOWN    &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans         &trans         &kp END       &kp PG_DN          &trans          &trans  &trans
 &trans       &trans    &trans           &trans       &trans               &trans  &trans  &trans  &trans  &trans  &trans                         &trans          &trans          &trans          &trans  &trans
            >;
        };

        layer_Media_navigation {
            bindings = <
 &trans           &trans         &trans  &trans    &trans                                                                                       &trans  &trans     &trans           &trans  &trans
 &trans           &trans         &trans  &trans    &trans     &trans                                                                  &trans    &trans  &trans     &trans           &trans  &trans
 &trans           &trans  &kp LG(LC(O))  &trans    &trans     &trans                                                                  &trans    &trans  &trans     &trans           &trans  &trans
 &trans           &trans       &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT                                                                &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT           &trans  &trans
 &trans  &kp PAUSE_BREAK         &trans  &trans    &trans     &trans         &trans  &trans  &trans  &trans  &trans         &trans    &trans    &trans  &trans     &trans  &kp PAUSE_BREAK  &trans
 &trans        &kp LSHFT         &trans  &trans    &trans             &mt LSHFT RET  &trans  &trans  &trans  &trans  &mt RSHFT RET              &trans  &trans     &trans           &trans  &trans
            >;
        };

        layer_NumPad {
            bindings = <
 &trans       &trans         &trans  &trans   &trans                                                                              &kp KP_NUM     &trans     &trans        &trans  &trans
 &trans       &trans         &trans  &trans   &trans  &trans                                                     &kp KP_MULTIPLY      &trans     &trans     &trans        &trans  &trans
 &trans       &trans         &trans  &trans   &trans  &trans                                                        &kp KP_SLASH   &kp KP_N7  &kp KP_N8  &kp KP_N9        &trans  &trans
 &trans  &kp LA(TAB)  &kp LG(LS(U))  &trans  &kp F11  &trans                                                         &kp KP_PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_ENTER  &trans
 &trans       &trans         &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans     &kp KP_MINUS   &kp KP_N1  &kp KP_N2  &kp KP_N3        &trans  &trans
 &trans       &trans         &trans  &trans   &trans          &trans  &trans  &trans  &trans  &kp SPACE  &trans                       &trans  &kp KP_N0    &kp DOT        &trans  &trans
            >;
        };

        layer_LH_Numpad {
            bindings = <
 &trans     &trans     &trans     &trans     &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans     &trans  &kp KP_N7  &kp KP_N8  &kp KP_N9  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LCTRL  &kp KP_N4  &kp KP_N5  &kp KP_N6  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans  &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans     &trans  &kp KP_N0     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans     &trans     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_F_keys {
            bindings = <
 &trans  &trans   &trans   &trans   &trans                                                                   &trans   &trans   &trans  &trans  &trans
 &trans  &trans  &kp F10  &kp F11  &kp F12  &trans                                                  &trans  &kp F10  &kp F11  &kp F12  &trans  &trans
 &trans  &trans   &kp F7   &kp F8   &kp F9  &trans                                                  &trans   &kp F7   &kp F8   &kp F9  &trans  &trans
 &trans  &trans   &kp F4   &kp F5   &kp F6  &trans                                                  &trans   &kp F4   &kp F5   &kp F6  &trans  &trans
 &trans  &trans   &kp F1   &kp F2   &kp F3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &kp F1   &kp F2   &kp F3  &trans  &trans
 &trans  &trans   &trans   &trans   &trans          &trans  &trans  &trans  &trans  &trans  &trans           &trans   &trans   &trans  &trans  &trans
            >;
        };

        layer_Awesome {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
